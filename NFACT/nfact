#!/bin/bash

# Written by Shaun Warrington, Ellie Thompson and Stam Sotiropoulos

# function to submit python jobs (to cluster or local) with dependencies
run_python(){
    # run <command> [job_id to wait for]
    commands=$1
    out=$2
    time=$3
    mem=$4
    JID=$5
    waitforme=""
    if [ "x$JID" != "x" ];then
    	waitforme=" -j $JID"
    fi

    if [ "x$SGE_ROOT" != "x" ]; then  # Submit all commands to run in parallel on the cluster
	    JID=`fsl_sub -T $time -R $mem -q bigmem.q $waitforme -l $out/logs -N nfact_py -t $commands`
    else   # If no SGE, run locally
    	sh $commands
    fi
    echo $JID
}

# function to join arguments by comma
function join_str { local IFS="$1"; shift; echo "$*"; }

shopt -s extglob

code_folder=$PWD

Splash (){
cat <<EOF

##    ## ########    ###     ######  ########
###   ## ##         ## ##   ##    ##    ##
####  ## ##        ##   ##  ##          ##
## ## ## ######   ##     ## ##          ##
##  #### ##       ######### ##          ##
##   ### ##       ##     ## ##    ##    ##
##    ## ##       ##     ##  ######     ##

EOF
}
Splash

Usage() {
    cat << EOF

Usage:
    nfact -nfact_dir <folder> [options]

    Compulsory arguments:

    EITHER:
       -nfact_dir    <folder>                     Directory containing the group-level NFacT connectivity matrix

    OR:
       -sub_dir      <folder>                     An individual subject's NFacT results folder
       -seeds        <left> <right>               Paths to the left and right cortical seeds (white-grey boundary GIFTI)
       -rois         <left> <right>               Paths to the left and right medial wall masks (GIFTI)

    Optional arguments:
       -n_comp                                    Number of components used in the NMF decomposition (default = 100)


Example call:

  To call nfact for group-level analysis (from nfact_preproc):

    nfact -nfact_dir /home/nfact_group

  To call nfact for subject-level analysis (from nfact_preproc):

    nfact -sub_dir /home/sub-01/nfact -seeds /home/sub-01/L.white.surf.gii /home/sub-01/R.white.surf.gii
        -rois /home/sub-01/L.roi.shape.gii /home/sub-01/R.roi.shape.gii

EOF
    exit 1
}

[ "$1" = "" ] && Usage

# Set default options
nfact_dir=""
sub_dir=""
left_seed=""
right_seed=""
left_roi=""
right_roi=""
n_components=100

# Parse command-line arguments
while [ ! -z "$1" ];do
    case "$1" in
  -nfact_dir) nfact_dir=$2;shift;;
  -sub_dir) sub_dir=$2;shift;;
  -seeds) left_seed=$2;right_seed=$3;shift;shift;;
  -rois) left_roi=$2;right_roi=$3;shift;shift;;
  -n_comp) n_components=$2;shift;;
	*) echo "Unknown option '$1'";exit 1;;
    esac
    shift
done

# Check compulsory arguments
errflag=0
if [ "$nfact_dir" == "" ] && [ "$sub_dir" == "" ];then
    echo "Must set either compulsory argument '-nfact_dir' or '-sub_dir'"
    errflag=1
elif [ ! "$nfact_dir" == "" ] && [ ! "$sub_dir" == "" ];then
    echo "Both '-nfact_dir' and '-sub_dir' have been provided - only provide one."
    errflag=1
fi
# if doing subject-level check arguments
if [ ! "$sub_dir" == "" ];then
  if [ "$left_seed" == "" ] || [ "$right_seed" == "" ];then
    echo "Must provide two inputs for argument '-seeds'"
    errflag=1
  fi
  if [ "$left_roi" == "" ] || [ "$right_roi" == "" ];then
    echo "Must provide two inputs for argument '-rois'"
    errflag=1
  fi
  if [ ! -f $left_seed ];then
    echo "Left seed surface file $left_seed not found"
    errflag=1
  fi
  if [ ! -f $right_seed ];then
    echo "Right seed surface file $right_seed not found"
    errflag=1
  fi
  if [ ! -f $left_roi ];then
    echo "Left ROI surface file $left_roi not found"
    errflag=1
  fi
  if [ ! -f $right_roi ];then
    echo "Right ROI surface file $right_roi not found"
    errflag=1
  fi
fi

# check error flag and exit if required
if [ "$errflag" -eq 1 ];then
    echo ""
    echo "Exit without doing anything..."
    exit 1
fi

if [ "x$SGE_ROOT" != "x" ]; then
  echo "Submitting NMF jobs... n_components = ${n_components}"
else
  echo "Running NMF processing... n_components = ${n_components}"
fi

# set level-dependent arguments (group-level)
if [ ! "$nfact_dir" == "" ];then
  out=$nfact_dir
  cm_paths="$nfact_dir/average_matrix2.npz"
  seeds="$nfact_dir/config/L.white.surf.gii,$nfact_dir/config/R.white.surf.gii"
  rois="$nfact_dir/config/L.roi.shape.gii,$nfact_dir/config/R.roi.shape.gii"
  waytotal="x"
  tract_coords="$nfact_dir/config/tract_space_coords_for_fdt_matrix2"
  lookup="$nfact_dir/config/lookup_tractspace_fdt_matrix2.nii.gz"
  r_flag=0 # flag to tell if group or subject level: 0=group, 1=subject
# (subject-level)
else
  out=$sub_dir
  seeds="$left_seed,$right_seed"
  rois="$left_roi,$right_roi"

  waytotal=""
  cm_paths=""
  for seed in $left_seed $right_seed; do
      r=`basename $seed`
      r=`echo ${r%%.@(nii|nii.gz|gii|surf.gii|asc)}`    # remove extensions
      waytotal="$waytotal $sub_dir/omatrix2/omatrix2_$r/waytotal"
      cm_paths="$cm_paths $sub_dir/omatrix2/omatrix2_$r/fdt_matrix2.dot"

      tract_coords="$sub_dir/omatrix2/omatrix2_$r/tract_space_coords_for_fdt_matrix2"
      lookup="$sub_dir/omatrix2/omatrix2_$r/lookup_tractspace_fdt_matrix2.nii.gz"
  done
  cm_paths=`join_str , $cm_paths`
  waytotal=`join_str , $waytotal`
  r_flag=1
fi

# build python command
commands=$out/command.txt
rm -rf $commands

cmd="python3 $code_folder/nfact_scripts/nfact_nmf.py $out $n_components $cm_paths"
cmd="$cmd $seeds $rois $waytotal $tract_coords $lookup $r_flag"
echo $cmd >> $commands
chmod +x $commands

# how much time/memory is needed?
nvert=(`echo $seeds | sed s@","@" "@g`)
nvert=`grep 'Dim0=' $nvert`
nvert=`echo $nvert | awk -F'"' '{print $2}'`

if [ "$nvert" -gt 25000 ]; then
  time=1440
  mem=450000
elif [ "$nvert" -gt 6000 ]; then
  time=770
  mem=150000
else
  time=300
  mem=30000
fi
# Currently used for debugging
#echo 'cmd' $cmd
#echo $seeds
#echo $rois
#echo $waytotal
#echo $tract_coords
#echo $lookup
#echo $r_flag
#exit
run_python $commands $out $time $mem
